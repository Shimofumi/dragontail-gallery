---
import type { MarkdownInstance, Page } from "astro";
import type { GetStaticPaths } from "astro";
import Layout from "../../../layouts/Layout.astro";
import path from 'path'
import Pagination from "../../../components/Pagination.astro";
import GalleryGrid from "../../../components/GalleryGrid.astro";

export interface Props {
  page: Page;
  posts: MarkdownInstance<Record<string, any>>[];
}

export const getStaticPaths = (({paginate}) => {
  const allPosts : MarkdownInstance<Record<string, any>>[] = Object.values(import.meta.glob("../../picture/*.md", { eager: true }));
  allPosts.sort((a, b) => {
		const aDate = new Date(a.frontmatter.date);
		const bDate = new Date(b.frontmatter.date);
		return bDate.getTime() - aDate.getTime()
	});

  const uniqueTags = [
    ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
  ] as string[];

  return uniqueTags.flatMap((tag) => {
    const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
    return  paginate( filteredPosts , {
      params: { tag },
      pageSize: 18 //pageSize 何作品ずつ表示するか
    });
  });
}) satisfies GetStaticPaths;

const { tag } = Astro.params;
const { page } = Astro.props;
---
{ tag === undefined ? <></> : (
<Layout title={`${tag}がついたページ`}>
  <h1><span>{tag}</span>がついたページ - {page.currentPage}</h1>
    <GalleryGrid page={page} />
    <Pagination page={page} path={`/tags/${tag}`} />
</Layout>
)}
